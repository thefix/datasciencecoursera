load("~/Coursera/AdvancedAnalytics/SOA Adv. Business Analytics/1 linear models.R")
f <- function(x, mu, sigma) 1/(sigma*(2*pi)^.5) * exp( -(x-mu)^2/(2*sigma^2) )
mu <- 100
sigma <- 15
xx <- seq(40, 160, 2)
yy <- f(xx, mu, sigma)
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=5, type='o')
titl("The Normal Probability Density Function")
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='o')
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='+')
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='+')
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='1')
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='a')
title("The Normal Probability Density Function")
?title
?plot
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='p')
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='l')
title("The Normal Probability Density Function")
?plot
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='l',xlab(xx))
title("The Normal Probability Density Function")
plot(xx, yy, col="navy", ylim=c(0,.03), lwd=1, type='l')
title("The Normal Probability Density Function")
?function
?function
?function
normal
?normal
??normal
cls()
ls()
install.packages("swirl")
library(swirl)
siwrl()
swirl()
5+8
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
bye()
setwd("~/Coursera/datasciencecoursera/GC/Project")
library(stringr)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="") ls() #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(y_test,x_test)
train_set<-cbind(y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy<-data_set[,c(1,1+features_mean$V1)]  #picks the first and all the mean #JMF (and later std) cols
#name the variables
fmv2<-as.vector(features_mean$V2)
var_names<-c("subject",fmv2)
names(tidy)<-var_names
#test if anything is NA
setwd("~/Coursera/datasciencecoursera/GC/Project")
rm(list=ls())
library(stringr)
x_test<-read.table("X_test.txt", sep="")
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
test_set<-cbind(y_test,x_test)
train_set<-cbind(y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
tidy<-data_set[,c(1,1+features_mean$V1)]  #picks the first and all the mean #JMF (and later std) cols
#name the variables
fmv2<-as.vector(features_mean$V2)
var_names<-c("subject",fmv2)
names(tidy)<-var_names
head(tidy)
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
features_std
tidy<-data_set[,c(1,1+features_mean$V1,1+features_std$V1)]
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2))
var_names<-c("subject",fmv2)
names(tidy)<-var_names
head(tidy)
rm(list=ls())
library(stringr)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(subject_test,y_test,x_test)
train_set<-cbind(subject_train,y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1)]  #picks the first and all the mean #JMF (and later std) cols
#name the variables
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2))
var_names<-c("subject","activity",fmv2)
names(tidy)<-var_names
head(tidy)
a<-xtabs( Freq ~ subject + activity)
table(tidy,subject,activity)
table(tidy,tidy$subject,tidy$activity)
summmary(tidy)
summary(tidy)
a<-summary(tidy)
a[1,]
a[4,]
?summary
dim(tidy)
View(tidy)
library(plyr)
install.packages("plyr")
library(plyr)
llply(tidy, mean)
?group
aggregate(subject~activity,tidy,mean)
aggregate(subject~ subject + activity,tidy,mean)
aggregate(fBodyBodyGyroJerkMag-std()~ subject + activity,tidy,mean)
head(tidy)
tidy$fBodyBodyGyroJerkMag-std()[1]
var_names
aggregate(var_names ~ subject)
aggregate(var_names ~ subject,tidy)
aggregate(c(var_names) ~ subject,tidy)
a<-ddply(tidy, .(Subject, Activity), colwise(mean))
a<-ddply(tidy, .(subject, activity), colwise(mean))
a
tail(a)
mean(a)
class(a)
aa<-ddply(tidy, .(subject), colwise(mean))
aa
aa<-ddply(tidy, .(subject+activity), colwise(mean))
head(aa)
?group_by
aa<-ddply(tidy, .(subject+activity), .variables="subject" colwise(mean))
aa<-ddply(tidy, .(subject+activity), .variables="subject", colwise(mean))
aa<-ddply(tidy, .variables="subject", colwise(mean))
head(aa)
ab<-ddply(tidy, .variables="activity", colwise(mean))
ab[1,1:3]
a[1,1:3]
tail(a)
aa<-ddply(tidy, .(subject+activity), colwise(mean))
a<-ddply(tidy, .(subject, activity), colwise(mean))
a[1:3,1:5]
###############################################################################
#
# Getting and Cleaning Data Project
#
#
###################################JMF########################################
# load stringr package
#
#uses function string_detect
#
library(stringr)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(subject_test,y_test,x_test)
train_set<-cbind(subject_train,y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where Mean is in the name
Mean_num<-which(str_detect(f,"Mean"))
features_Mean<-features[Mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy_mean_std<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1, 2+features_Mean)]  #picks the first and all the mean, std and Mean #JMF (and later std) cols
#rename the variables
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2))
var_names<-c("subject","activity",fmv2)
names(tidy_mean_std)<-var_names
#extract the means for all subject activity combination
finaltidy_mean_by_activity_by_subject<-ddply(tidy_mean_std, .(subject, activity), colwise(mean))
#need to rename all vars to mean_of_oldname
#test if anything is NA
rm(list=ls())
###############################################################################
#
# Getting and Cleaning Data Project
#
#
###################################JMF########################################
# load stringr package
#
#uses function string_detect
#
library(stringr)
# load plyr package
#
#uses function ddply
#
library(plyer)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(subject_test,y_test,x_test)
train_set<-cbind(subject_train,y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where Mean is in the name
Mean_num<-which(str_detect(f,"Mean"))
features_Mean<-features[Mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy_mean_std<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1, 2+features_Mean)]  #picks the first and all the mean, std and Mean #JMF (and later std) cols
#rename the variables
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2))
var_names<-c("subject","activity",fmv2)
names(tidy_mean_std)<-var_names
#extract the means for all subject activity combination
finaltidy_mean_by_activity_by_subject<-ddply(tidy_mean_std, .(subject, activity), colwise(mean))
#need to rename all vars to mean_of_oldname
#test if anything is NA
rm(list=ls())
###############################################################################
#
# Getting and Cleaning Data Project
#
#
###################################JMF########################################
# load stringr package
#
#uses function string_detect
#
library(stringr)
# load plyr package
#
#uses function ddply
#
library(plyr)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(subject_test,y_test,x_test)
train_set<-cbind(subject_train,y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where Mean is in the name
Mean_num<-which(str_detect(f,"Mean"))
features_Mean<-features[Mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy_mean_std<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1, 2+features_Mean)]  #picks the first and all the mean, std and Mean #JMF (and later std) cols
#rename the variables
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2))
var_names<-c("subject","activity",fmv2)
names(tidy_mean_std)<-var_names
#extract the means for all subject activity combination
finaltidy_mean_by_activity_by_subject<-ddply(tidy_mean_std, .(subject, activity), colwise(mean))
#need to rename all vars to mean_of_oldname
#test if anything is NA
a<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1, 2+features_Mean)]
features_mean$V1
2+features_mean$V1
2+features_std$V1
rm(list=ls())
###############################################################################
#
# Getting and Cleaning Data Project
#
#
###################################JMF########################################
# load stringr package
#
#uses function string_detect
#
library(stringr)
# load plyr package
#
#uses function ddply
#
library(plyr)
# read the 8 tables of data into 8 data frames
x_test<-read.table("X_test.txt", sep="")    # observations in test set
x_train<-read.table("X_train.txt", sep="")  # observations in training set
y_test<-read.table("y_test.txt", sep="")    #
y_train<-read.table("y_train.txt", sep="")  #
subject_test<-read.table("subject_test.txt", sep="")    # table of subject ids for the observations in test set
subject_train<-read.table("subject_train.txt", sep="")  # table of subject ids for the observations in training set
features<-read.table("features.txt", sep="")                  # variable number and names
activity_labels<-read.table("activity_labels.txt", sep="")    # activity number and names
# when we look at the dim of all those data frames we realize that
# there are 561 variables
# there are 6 activities
# there are 7352 observations in tesin and 2947 in test
#
# add the subject as the first column of their respective observations
test_set<-cbind(subject_test,y_test,x_test)
train_set<-cbind(subject_train,y_train,x_train)
#rename the first column of each as subject
names(test_set)[1]<-"subject"
names(train_set)[1]<-"subject"
# combine the two sets
data_set<-rbind(train_set,test_set)
f<-as.vector(features$V2)  #transform variable names in a vector
#create a new data frame extracted from features where mean is in the name
mean_num<-which(str_detect(f,"mean"))
features_mean<-features[mean_num,]
#create a new data frame extracted from features where Mean is in the name
Mean_num<-which(str_detect(f,"Mean"))
features_Mean<-features[Mean_num,]
#create a new data frame extracted from features where std is in the name
std_num<-which(str_detect(f,"std"))
features_std<-features[std_num,]
tidy_mean_std<-data_set[,c(1,2,2+features_mean$V1,2+features_std$V1, 2+features_Mean$V1)]  #picks the first and all the mean, std and Mean #JMF (and later std) cols
#rename the variables
fmv2<-c(as.vector(features_mean$V2),as.vector(features_std$V2),as.vector(features_Mean$V2))
var_names<-c("subject","activity",fmv2)
names(tidy_mean_std)<-var_names
#extract the means for all subject activity combination
finaltidy_mean_by_activity_by_subject<-ddply(tidy_mean_std, .(subject, activity), colwise(mean))
#need to rename all vars to mean_of_oldname
#test if anything is NA
head(finaltidy_mean_by_activity_by_subject)
names(finaltidy_mean_by_activity_by_subject)
